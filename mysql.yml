# DB template.
apiVersion: v1
kind: Template
metadata:
  name: mysql-db
  annotations:
    description: This template defines objects that are required to spin up a mysqldb pod
    tags: db, mysql-db ,persistent  
    openshift.io/display-name: mysql-db
    openshift.io/long-description: "This template provides objects that are required to spin up a mysqldb pod. The database is stored on persistent storage, so any restart of the service will not cause any impact to the data.
     Please make sure you have provisioned PVs (Persistent Volumes) before using this template. "
labels:
  app: mysql-db
parameters:
  -
    name: APPLICATION_NAME
    value: mysql-db
    description: Name of the application
    required: true
    displayName: Application Name
  -
    name: SECRET_REF
    value: mysql-dbt-ref
    description: Name of the secret reference
    required: true
    displayName: "Name of the secret reference"
  -
    name: MYSQL_USER
    displayName: MySQL Connection Username
    description: Username for MySQL user that will be used for accessing the database.
    generate: expression
    from: user[A-Z0-9]{3}
    required: true
  -
    name: MYSQL_PASSWORD
    displayName: MySQL Connection Password
    description: Password for the MySQL connection user.
    generate: expression
    from: "[a-zA-Z0-9]{16}"
    required: true
  -
    name: MYSQL_ROOT_PASSWORD
    displayName: MySQL root user Password
    description: Password for the MySQL root user.
    generate: expression
    from: "[a-zA-Z0-9]{16}"
    required: true
  -
    name: DATABASE_NAME
    value: default
    displayName: MySQL DB Name
    description: Name of the MySQL database accessed.
    required: true
  -
    name: VOLUME_CAPACITY
    displayName: Volume Capacity
    description: Volume space available for data, e.g. 512Mi, 2Gi.
    value: 1Gi
    required: true
objects:
  -
    apiVersion: v1
    kind: Secret
    metadata:
      name: ${SECRET_REF}
    stringData:
      database-user: "${MYSQL_USER}"
      database-password: "${MYSQL_PASSWORD}"
      database-root-password: "${MYSQL_ROOT_PASSWORD}"
  -
    apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: ${APPLICATION_NAME}
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: "${VOLUME_CAPACITY}"
  -
    apiVersion: v1
    kind: DeploymentConfig
    metadata:
      name: ${APPLICATION_NAME}
      labels:
        app: ${APPLICATION_NAME}
    spec:
      triggers:
        -
          type: ConfigChange
      replicas: 1
      selector:
        app: ${APPLICATION_NAME}
      template:
        metadata:
          labels:
            app: ${APPLICATION_NAME}
        spec:
          volumes:
          - name: ${APPLICATION_NAME}-data
            persistentVolumeClaim:
              claimName: ${APPLICATION_NAME}
          containers:
          - name: ${APPLICATION_NAME}
            image: mysql:5.7.20
            env:
            - name: MYSQL_DATABASE
              value: ${DATABASE_NAME}
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: ${SECRET_REF}
                  key: database-user
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ${SECRET_REF}
                  key: database-password
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ${SECRET_REF}
                  key: database-root-password
            ports:
            - containerPort: 3306
            volumeMounts:
            - name: ${APPLICATION_NAME}-data
              mountPath: /var/lib/mysql
            resources:
            imagePullPolicy: IfNotPresent
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
  -
    apiVersion: v1
    kind: Service
    metadata:
      name: ${APPLICATION_NAME}
      labels:
        app: ${APPLICATION_NAME}
    spec:
      ports:
        -
          name: mysqldb-bc
          protocol: TCP
          port: 3306
          targetPort: 3306
        -
          name: mysqldb
          protocol: TCP
          port: 80
          targetPort: 3306
      selector:
        app: ${APPLICATION_NAME}
